from pprint import pprint
import os, json
import boto3
from botocore.exceptions import ClientError

def handler(event, context):
    VERSION = os.environ['VERSION']
    REGION = os.environ['REGION']

    AMI_POST_USB = os.environ['AMI_POST_USB']
    AMI_NO_POST_USB = os.environ['AMI_NO_POST_USB']
    AMI_POST = os.environ['AMI_POST']
    AMI_NO_POST = os.environ['AMI_NO_POST']

    TAG_SPEC = [
            {
            "ResourceType":"instance",
            "Tags": [
                    {
                        "Key": "Name",
                        "Value": "EC2_INSTANCE_TEST_AUTOGENERATED"
                    }
                ]
            }
    ]
    PLACE_SPEC = { 'AvailabilityZone': 'us-west-2d' }

    ec2 = boto3.client('ec2', region_name=REGION)
    ddb = boto3.resource('dynamodb', region_name=REGION)
    email = event['requestContext']['authorizer']['claims']['email']
    
    #DynamoDB table Name
    table = ddb.Table('forensics-users-test')
    
    #use email as the primary key to get the DDB item/entry
    try:
        response = table.get_item(Key={'user-email': email})
    except ClientError as e:
        print(e.response['Error']['Message'])
        return

    #update boolean values to the ddb entry we just got
    usb = response['Item']['has_usb']
    post_it = response['Item']['has_post_it']
    
    #select the right launch template, specified by their template name
    if (post_it):
        if (usb):
            template = AMI_POST_USB
        else:
            template = AMI_POST
    else:
        if (usb):
            template = AMI_NO_POST_USB
        else:
            template = AMI_NO_POST
    
          
    instance = ec2.run_instances(
        MaxCount=1,
        MinCount=1,
        LaunchTemplate={
            'LaunchTemplateName': template,
            'Version': VERSION,
        },
        IamInstanceProfile={
            'Arn': 'arn:aws:iam::415663925972:instance-profile/EC2InstanceProfileForSSM'
        }
    )
    
    #print(instance)
    #TODO, get the public IP and set it on the entry, then trigger the requestInst lambda
    instance_id = instance['Instances'][0]['InstanceId']
    #ip = instance['Instances'][0][u'PublicIpAddress']
    print(instance_id)
    response = table.update_item(Key={'user-email': email}, UpdateExpression="SET inst_id=:i", ExpressionAttributeValues={':i': instance_id}, ReturnValues="UPDATED_NEW")
    
    
    return {
      'statusCode': 200,
      'headers': {
          'Access-Control-Allow-Headers': '*',
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Methods': 'GET, PUT, POST, OPTIONS'
      },
      'body': json.dumps(response)
  }
    